services:
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    command: --wiredTigerCacheSizeGB ${MONGO_CACHE_SIZE} --port ${MONGO_PORT}
    mem_limit: ${MONGO_MEM_LIMIT}
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATA_DIR: /data/db
    volumes:
      - motion_mongo:/data/db
      - motion_mongoconfig:/data/configdb
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet" ]
      interval: 300s
      timeout: 10s
      start_period: 10s
      retries: 5
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:${MONGO_PORT}/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_PASSWORD}
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_NODE_PORT: ${RABBITMQ_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: vhost
    volumes:
      - motion_rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 300s
      timeout: 10s
      start_period: 10s
      retries: 5
  flower:
    image: mher/flower
    container_name: flower
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: celery --broker=amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT}/vhost flower --broker_api=http://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@rabbitmq:15672/api/vhost
    ports:
      - '5555:5555'
    volumes:
      - motion_flower:/data
  elasticsearch:
    image: elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    restart: always
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx4g"
      discovery.type: single-node
      xpack.security.enabled: false
    volumes:
      - motion_elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 300s
      timeout: 10s
      start_period: 10s
      retries: 5
  mb-back:
    image: tlcfem/motion-base:back
    #    container_name: mb-back
    scale: ${MB_REPLICA}
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - ${MB_PORT}
    volumes:
      - motion_cache:${MB_FS_ROOT}
    environment:
      MB_SECRET_KEY: ${MB_SECRET_KEY}
      MB_ALGORITHM: ${MB_ALGORITHM}
      MB_ACCESS_TOKEN_EXPIRE_MINUTES: ${MB_ACCESS_TOKEN_EXPIRE_MINUTES}
      MB_SUPERUSER_EMAIL: ${MB_SUPERUSER_EMAIL}
      MB_SUPERUSER_FIRST_NAME: ${MB_SUPERUSER_FIRST_NAME}
      MB_SUPERUSER_LAST_NAME: ${MB_SUPERUSER_LAST_NAME}
      MB_SUPERUSER_USERNAME: ${MB_SUPERUSER_USERNAME}
      MB_SUPERUSER_PASSWORD: ${MB_SUPERUSER_PASSWORD}
      MB_PORT: ${MB_PORT}
      MB_FASTAPI_WORKERS: 1 # using only one process for each container
      MB_FS_ROOT: ${MB_FS_ROOT}
      MB_MAIN_SITE: ${MB_MAIN_SITE}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_HOST: mongo
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      ELASTIC_HOST: elasticsearch
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MB_PORT}" ]
      interval: 300s
      timeout: 5s
      start_period: 60s
      retries: 10
  mb-worker:
    image: tlcfem/motion-base:back
    container_name: mb-worker
    restart: always
    depends_on:
      - mongo
      - rabbitmq
      - elasticsearch
    command: celery
    volumes:
      - motion_cache:${MB_FS_ROOT}
    environment:
      MB_SECRET_KEY: ${MB_SECRET_KEY}
      MB_ALGORITHM: ${MB_ALGORITHM}
      MB_ACCESS_TOKEN_EXPIRE_MINUTES: ${MB_ACCESS_TOKEN_EXPIRE_MINUTES}
      MB_SUPERUSER_EMAIL: ${MB_SUPERUSER_EMAIL}
      MB_SUPERUSER_FIRST_NAME: ${MB_SUPERUSER_FIRST_NAME}
      MB_SUPERUSER_LAST_NAME: ${MB_SUPERUSER_LAST_NAME}
      MB_SUPERUSER_USERNAME: ${MB_SUPERUSER_USERNAME}
      MB_SUPERUSER_PASSWORD: ${MB_SUPERUSER_PASSWORD}
      MB_PORT: ${MB_PORT}
      MB_FASTAPI_WORKERS: 2
      MB_FS_ROOT: ${MB_FS_ROOT}
      MB_MAIN_SITE: ${MB_MAIN_SITE}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_HOST: mongo
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      ELASTIC_HOST: elasticsearch
  mb-front:
    image: tlcfem/motion-base:front
    container_name: mb-front
    restart: always
    depends_on:
      - mb-back
    ports:
      - '3000:3000'
  nginx:
    image: nginx
    container_name: nginx
    restart: always
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf.sh:/tmp/nginx.conf.sh
    environment:
      MB_PORT: ${MB_PORT}
      MB_REPLICA: ${MB_REPLICA}
    command: /tmp/nginx.conf.sh docker-mb-back
    depends_on:
      - mb-back

volumes:
  motion_mongo:
  motion_mongoconfig:
  motion_rabbitmq:
  motion_cache:
  motion_flower:
  motion_elasticsearch:
